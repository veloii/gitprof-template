---
import { twMerge } from 'tailwind-merge'
import {Icon} from "astro-icon"
interface Props {
    author: string
    name: string
    id: string
    description?: string
    buttons?: Array<{href: string, name: string} | {href: string, icon: {pack: string, name: string}}>
}

const {author, buttons = [], description, id, name} = Astro.props;

let iconButtons = buttons.filter(button => "icon" in button) as Array<{href: string, icon: {pack: string, name: string}}>;

let textButtons = buttons.filter(button => !("icon" in button)) as Array<{href: string, name: string}>;
---

<div transition:animate="initial" transition:name={id} class="rounded-xl p-[2px] overflow-hidden bg-gradient-to-br from-primary-500 to-accent-500">
    <div class="rounded-[10px] py-3 px-4 bg-white/75 dark:bg-black/75">
        <div class="flex gap-2 items-center mb-1 opacity-70">
            <Icon class="h-4" pack="feather" name="at-sign" />
            <p class="font-semibold">
                {author}
            </p>
        </div>
        <span class="font-semibold text-xl">{name}</span>
        {description && (
            <p class="text-lg pt-2 font-semibold opacity-60">
                {description}
            </p>
        )}

        {buttons.length > 0 && ( 
            <div class="flex justify-between mt-4">
                {textButtons.length > 0 && ( 
                    <div class="flex gap-2">
                        {textButtons.map((button, index) => (
                            <a class={twMerge([
                                "inline-flex items-center px-3 py-1.5 rounded-lg text-base font-medium dark:bg-white/10 dark:hover:bg-white/20 dark:text-white bg-black/10 hover:bg-black/20 text-black transition-colors",
                                index === 0 && "rounded-r",
                                index === textButtons.length - 1 && "rounded-l",
                                index !== 0 && index !== textButtons.length - 1 && "rounded",
                                textButtons.length === 1 && "rounded-lg",
                            ].join(" "))} href={button.href} target="_blank">
                                {button.name}
                            </a>
                        ))}
                    </div>
                )}

                <div class="flex gap-4 p-1">
                    {iconButtons.map((button) => (
                        <a class="inline-flex items-center rounded-lg text-base font-medium dark:text-white text-black transition-opacity opacity-90 hover:opacity-70" href={button.href} target="_blank">
                            <Icon class="h-6" pack={button.icon.pack} name={button.icon.name} />
                        </a>
                    ))}
                </div>
            </div>
        )}
    </div>
</div>